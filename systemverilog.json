{
	// Place your snippets for verilog here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Header-0": {
		"prefix": "header_Company",
		"body": [
			"//////////////////////////////////////////////////////////////////////////////////",
			"// Company: Concemed",
			"// Engineer: Alfred Wen",
			"//",
			"// Create Date: $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"// Design Name: $TM_FILENAME",
			"// Module Name: ",
			"// Project Name: ",
			"// Target Devices: xcku060-ffva1156-2-i / xc7a35tcsg325-1",
			"// Tool Versions: Vivado 2021.1",
			"// Description:",
			"//",
			"// Dependencies:",
			"//",
			"// Revision:",
			"// Revision 0.01 - File Created",
			"// Additional Comments:",
			"//",
			"//////////////////////////////////////////////////////////////////////////////////"
		],
		"description": "Company Header"
	},
	"Header-1": {
		"prefix": "Header_Personal",
		"body": [
			"//***********************************************************************//",
			"//*  File           : $TM_FILENAME                                         ",
			"//*  Module Name    :                                                      ",
			"//*  Revision       :                                                      ",
			"//*  Model          :                                                      ",
			"//*                                                                        ",
			"//*  Description    :                                                      ",
			"//*                                                                        ",
			"//*                                                                        ",
			"//*                                                                        ",
			"//*  Designer       : Alfred Wen                                           ",
			"//*  Create Date    : $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"//*  Rev        Author        Date        Modification                     ",
			"//*  ---       ---------    ---------     ---------------                  ",
			"//*                                                                        ",
			"//*                                                                        ",
			"//*************************************************************************//"
		],
		"description": "Personal Header"
	},
	"Comment-0": {
		"prefix": "Description_Function",
		"body": [
			"//***************************************************************************",
			"// Description",
			"//***************************************************************************"
		],
		"description": "Description of Function"
	},
	"Comment-1": {
		"prefix": "Description_Signal",
		"body": [
			"//--------------------------------------------------------------------------//",
			"// Description",
			"//--------------------------------------------------------------------------//"
		],
		"description": "Description of group signals"
	},
	"Comment-2": {
		"prefix": "Description_Instantiation",
		"body": [
			"//***************************************************************************",
			"// Instantiation",
			"//***************************************************************************"
		],
		"description": "Description of Instantiation"
	},
	"Module-0": {
		"prefix": "MyModule_WithoutParams",
		"body": [
			"`timescale 1ps/1ps",
			"module $TM_FILENAME_BASE (",
			"input clk_in,",
			"input rst_n_in,",
			"output ,",
			");",
			"//--------------------------------------------------------------------------//",
			"// internal signals",
			"//--------------------------------------------------------------------------//",
			"//--------------------------------------------------------------------------//",
			"// outputs",
			"//--------------------------------------------------------------------------//",
			"endmodule"
		],
		"description": "Submodule Template Without Parameters"
	},
	"Module-1": {
		"prefix": "MyModule_WithParams",
		"body": [
			"`timescale 1ps/1ps",
			"module $TM_FILENAME_BASE ",
			"#(",
			"parameter = ",
			")",
			"(",
			"input clk_in,",
			"input rst_n_in,",
			"output ,",
			");",
			"//--------------------------------------------------------------------------//",
			"// internal signals",
			"//--------------------------------------------------------------------------//",
			"//--------------------------------------------------------------------------//",
			"// outputs",
			"//--------------------------------------------------------------------------//",
			"endmodule"
		],
		"description": "Submodule Template With Parameters"
	},
	"Debug-0": {
		"prefix": "Vivado_Debug",
		"body": [
			"(*mark_debug = \"true\"*)"
		],
		"description": "Vivado Debug Signals Prefix"
	},
	"alwaysblock-0": {
		"prefix": "async_submodules_always",
		"body": [
			"always@(posedge clk_in or negedge rst_n_in )begin",
			"    if (~rst_n_in) begin",
			"    end",
			"end"
		],
		"description": "alwaysblock in submodule"
	},
	"alwaysblock-1": {
		"prefix": "async_topmodules_always",
		"body": [
			"always@(posedge clk or negedge rst_n )begin",
			"    if (~rst_n) begin",
			"    end",
			"end"
		],
		"description": "alwaysblock in topmodule"
	},
	"alwaysblock-2": {
		"prefix": "sync_submodules_always",
		"body": [
			"always@(posedge clk_in)begin",
			"    if (~rst_n_in) begin",
			"    end",
			"end"
		],
		"description": "alwaysblock in submodule"
	},
	"alwaysblock-3": {
		"prefix": "sync_topmodules_always",
		"body": [
			"always@(posedge clk)begin",
			"    if (~rst_n) begin",
			"    end",
			"end"
		],
		"description": "alwaysblock in topmodule"
	},
	"alwaysblock-4": {
		"prefix": "always_cmb",
		"body": [
			" always@(*)",
			" begin",
			"",
			" end"
		],
		"description": "alwaysblock-4"
	},
	"generate_vcd": {
		"prefix": "generate_vcd_file",
		"body": [
			"//***************************************************************************",
			"// VCD File",
			"//***************************************************************************",
			"initial",
			"begin",
			"    \\$dumpfile(\"../../../$TM_FILENAME_BASE.vcd\");",
			"    \\$dumpvars;",
			"end"
		],
		"description": "vcd file in testbench topmodule"
	},
	"clockingblock": {
		"prefix": "clocking",
		"body": [
			"clocking @(posedge clk_in);",
			"endclocking"
		],
		"description": "clocking block in testbench interface",
	},
	"axis_verify_tb": {
		"prefix": "axis_tb_tmplt",
		"body": [
			"`timescale 1ps/1ps",
			"`include \"axis_if.sv\";",
			"module $TM_FILENAME_BASE();",
			"",
			"import axis_verify_pkg::*;",
			"",
			"//--------------------------------------------------------------------------//",
			"// localparams",
			"//--------------------------------------------------------------------------//",
			"parameter CLK = 10 * NS;",
			"parameter RST_N = 15 * NS;",
			"parameter DATA_WIDTH = 32;",
			"parameter H_ACTIVE = 16;",
			"parameter V_ACTIVE = 16;",
			"parameter H_BLANK = 0;",
			"parameter V_BLANK = 0;",
			"parameter FRAME_VALID = 1;",
			"",
			"string model_location = \"\";",
			"int mem_base_addr = ;",
			"string valid_type = \"\";",
			"",
			"//***************************************************************************",
			"// VCD File",
			"//***************************************************************************",
			"initial",
			"begin",
			"    \\$dumpfile(\"../../$TM_FILENAME_BASE.vcd\");",
			"    \\$dumpvars;",
			"end",
			"",
			"//***************************************************************************",
			"// construct objects",
			"//***************************************************************************",
			"cr_if #(CLK, RST_N) cr_if ();",
			"axis_if #(DATA_WIDTH, H_ACTIVE, V_ACTIVE) axis_if (cr_if.clk, cr_if.rst_n);",
			"read_ref_model #(DATA_WIDTH, H_ACTIVE, V_ACTIVE) rd_model = new(axis_if.read_ref_model);",
			"axis_gen #(DATA_WIDTH, H_ACTIVE, V_ACTIVE, H_BLANK, V_BLANK, FRAME_VALID) video_gen = new(axis_if.axis_gen);",
			"",
			"//***************************************************************************",
			"// main program",
			"//***************************************************************************",
			"initial",
			"begin",
			"    axis_if.model_location = model_location;",
			"    axis_if.mem_base_addr = mem_base_addr;",
			"    axis_if.valid_type = valid_type;",
			"end",
			"",
			"initial begin",
			"    #(10 * US);",
			"    \\$finish();",
			"end",
			"",
			"//***************************************************************************",
			"// Instantiation",
			"//***************************************************************************",
			"",
			"endmodule"
		],
		"description": "axis_verify_tb"
	},
	"do_file_gen": {
		"prefix": "do_file",
		"body": [
			"#清空命令窗口",
			".main clear",
			"",
			"#退出当前仿真",
			"quit -sim",
			"",
			"#创建工作库(work为工作库名称)",
			"vlib work",
			"",
			"#映射工作库(将创建的工作库与已有的库地址做连接，前一个work为创建工作库名称，后一个work为库地址)",
			"vmap work work",
			"",
			"#编译工程中的.v文件",
			"#vlog \"../rtl/memory.sv\"",
			"vlog \"\"",
			"",
			"#运行仿真 work.tb_top",
			"vsim -voptargs=+acc work.",
			"",
			"#设置时间精度(e.g 1ns)",
			"#vsim work .axis_verify_tb -t 1ns",
			"",
			"#添加指定信号",
			"# add wave -r /*",
			"",
			"#添加顶层所有的信号",
			"#Set the window types",
			"",
			"# 打开波形窗口",
			"#view wave",
			"#do wave.do",
			"#view structure",
			"",
			"# 打开信号窗口",
			"#view signals",
			"",
			"#运行xxms",
			"run 200us",
			"",
			"quit -sim"
		],
		"description": "do_file_gen"
	}
	// "do_file": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// "FSM": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}