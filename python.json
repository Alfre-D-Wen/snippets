{
    "cocotb_isp_0": {
        "prefix": "valid_insert",
        "body": [
            "def valid_insert():",
            "    while True:",
            "        # random.choices(population, weights)",
            "        # return a list, [0] means pop the first element",
            "        yield random.choices([1,0], weights=[0.0, 1])[0]"
        ],
        "description": "cocotb_isp"
    },
    "cocotb_isp_2": {
        "prefix": "clock_gen",
        "body": [
            "cocotb.start_soon(Clock(dut.clk_in, , units=\"ns\").start())"
        ],
        "description": "cocotb_isp"
    },
    "cocotb_test_0": {
        "prefix": "cocotb_test",
        "body": [
            "import random",
            "import cocotb",
            "import logging",
            "from cocotb.triggers import Timer",
            "from cocotb.clock import Clock",
            "from cocotb.regression import TestFactory",
            "",
            "from cocotb_isp.video_trans import VideoTrans",
            "from cocotb_isp.video_agent import VideoAxisAgent",
            "from cocotb_isp.video_scb import VideoAxisScb",
            "",
            "##############################",
            "## cocotb test",
            "##############################",
            "@cocotb.test()",
            "async def run_test(dut, hsize, vsize):",
            "    \"\"\"generate main clocks\"\"\"",
            "    cocotb.start_soon(Clock(dut.clk_in, , units=\"ns\").start())",
            "",
            "    \"\"\"dut interface\"\"\"",
            "",
            "    \"\"\"log level set\"\"\"",
            "    logging.getLogger().setLevel(logging.INFO)",
            "",
            "    \"\"\"instance\"\"\"",
            "",
            "    \"\"\"main tasks\"\"\"",
            "    cocotb_run(",
            "        rstn(dut),",
            "    )",
            "",
            "async def rstn(dut):",
            "    dut.rst_n_in.value = 0",
            "    await Timer(20, \"ns\")",
            "    dut.rst_n_in.value = 1",
            "",
            "def cocotb_run(*coros):",
            "    for coro in coros:",
            "        cocotb.start_soon(coro)  ",
            "",
            "##############################",
            "## Test Factory",
            "##############################",
            "factory = TestFactory(run_test)",
            "",
            "factory.add_option()",
            "",
            "factory.generate_tests()"
        ],
        "description": "cocotb_test_0"
    }
}